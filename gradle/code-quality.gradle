apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

check {
    dependsOn("jacocoTestReport")
}

task downloadCheckstyleXMLFile() << {
    def address='https://raw.githubusercontent.com/dheeraj-mummareddy/gradle-templates/master/codeQuality/checkstyle.xml'
    def target='${buildDir}/checkstyle.xml'

  new File("${address.tokenize('/')[-1]}").withOutputStream { out ->
      new URL(address).withInputStream { from ->  out << from; }
  }
}

build.dependsOn downloadCheckstyleXMLFile

checkstyle {
    ignoreFailures = true
    configFile = file('${buildDir}/checkstyle.xml')
    sourceSets = [ project.sourceSets.main ]
}

findbugs {
    ignoreFailures = true
    sourceSets = [ project.sourceSets.main ]
}

pmd {
    ignoreFailures = false
    toolVersion = "5.4.0"
    sourceSets = [ project.sourceSets.main ]
}

jacoco {
    reportsDir = file("$buildDir/reports/jacoco")
}

tasks.withType(FindBugs) {
    reports {
        xml.withMessages = true
    }
}

task downloadCheckstyleXLSFile() << {
    def address='https://raw.githubusercontent.com/dheeraj-mummareddy/gradle-templates/master/codeQuality/checkstyle.xsl'
    def target='${buildDir}/checkstyle.xls'

  new File("${address.tokenize('/')[-1]}").withOutputStream { out ->
      new URL(address).withInputStream { from ->  out << from; }
  }
}

build.dependsOn downloadCheckstyleXLSFile

task checkstyleHtml {
    group = "Verification"
    description = "Creates a human readable Checkstyle report"
    doLast {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('${buildDir}/checkstyle.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
    }
}
checkstyleMain.finalizedBy checkstyleHtml

task downloadFindbugsFile() << {
    def address='https://raw.githubusercontent.com/dheeraj-mummareddy/gradle-templates/master/codeQuality/findbugs.xsl'
    def target='${buildDir}/findbugs.xls'

  new File("${address.tokenize('/')[-1]}").withOutputStream { out ->
      new URL(address).withInputStream { from ->  out << from; }
  }
}

build.dependsOn downloadFindbugsFile

task findbugsHtml {
    group = "Verification"
    description = "Creates a human readable Findbugs report"
    doLast {
        ant.xslt(in: file("$buildDir/reports/findbugs/main.xml"),
                style: file('$buildDir/findbugs.xsl'),
                out: new File("$buildDir/reports/findbugs/main.html"))
    }
}
findbugsMain.finalizedBy findbugsHtml
